curve(exp())
curve(exp(x))
knitr::opts_chunk$set(echo = TRUE)
set.seed(1115) # Using this will ensure
# that the simulated data matches that
# obtained in this document.
set.seed(1115)
library(MPV) # contains the data set
summary(cigbutts)
?hclust
guesses <- c(0.4, 0.95, 0.50, 0.10, 0.80)
mean(log(guesses))
mean(log(guesses))*-1
knitr::opts_chunk$set(echo = TRUE)
x <- 1:6
y <- c(3.5, 4.7, 5.8, 4.9, 4.5, 4.6)
h <- 1.05
# local constant
x0 <- 3.7
g0.lm <- lm(y  ~ 1, weights = dnorm(x - x0, sd = h))
coef(g0.lm) # estimate of g(x0)
g0.lm <- lm(y  ~  I(x - x0), weights = dnorm(x - x0, sd = h))
coef(g0.lm)[1] # local linear estimate of g(x0)
# local quadratic
g0.lm <- lm(y ~ I(x - x0) + I((x-x0)^2), weights = dnorm(x - x0, sd = h))
coef(g0.lm)[1] # local quadratic estimate of g(x0)
# local constant
x0 <- seq(1.25, 5.75, 0.25)
m <- length(x0)
y0 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y  ̃ 1, weights = dnorm(x - x0[i], sd = h))
y0[i] <- coef(g0.lm) # estimate of g(x0)
}
# local linear
m <- length(x0)
y1 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y  ̃ I(x - x0[i]),
weights = dnorm(x - x0[i], sd = h))
y1[i] <- coef(g0.lm)[1] # local linear estimate of g(x0)
}
# local quadratic
m <- length(x0)
y2 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y  ̃ I(x - x0[i]) + I((x-x0[i])ˆ2),
# local constant
x0 <- seq(1.25, 5.75, 0.25)
m <- length(x0)
y0 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y ~ 1, weights = dnorm(x - x0[i], sd = h))
y0[i] <- coef(g0.lm) # estimate of g(x0)
}
# local linear
m <- length(x0)
y1 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y ~ I(x - x0[i]),
weights = dnorm(x - x0[i], sd = h))
y1[i] <- coef(g0.lm)[1] # local linear estimate of g(x0)
}
# local quadratic
m <- length(x0)
y2 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y ~ I(x - x0[i]) + I((x-x0[i])^2),
weights = dnorm(x - x0[i], sd = h))
y2[i] <- coef(g0.lm)[1] # local quadratic estimate of g(x0)
}
plot(x, y)
lines(x0, y0)
lines(x0, y1, col=2)
lines(x0, y2, col=3)
legend(1, 95, legend=c("constant", "linear", "quadratic"),
col=c(0,1,2), lty=1:3, cex=0.8)
?legend
legend(5,5.5, legend=c("constant", "linear", "quadratic"),
col=c(0,1,2), lty=1:3, cex=0.8)
plot(x, y)
lines(x0, y0)
lines(x0, y1, col=2)
lines(x0, y2, col=3)
legend(5,5.5, legend=c("constant", "linear", "quadratic"),
col=c(0,1,2), lty=1:3, cex=0.8)
legend(5,5.5, legend=c("constant", "linear", "quadratic"),
col=c(0,1,2), cex=0.8)
plot(x, y)
lines(x0, y0)
lines(x0, y1, col=2)
lines(x0, y2, col=3)
legend(5,5.5, legend=c("constant", "linear", "quadratic"),
col=c(0,1,2), cex=0.8)
plot(x, y)
lines(x0, y0)
lines(x0, y1, col=2)
lines(x0, y2, col=3)
legend(5,5.5, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), lty=1:3, cex=0.8)
legend(5,5.5, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), lty=1:3)
legend(5,5.5, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), lty=1:3))
plot(x, y)
lines(x0, y0)
lines(x0, y1, col=2)
lines(x0, y2, col=3)
legend(5,5.5, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), lty=1:3)
# local constant
x0 <- seq(1.25, 5.75, 0.25)
m <- length(x0)
y0 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y ~ 1, weights = dnorm(x - x0[i], sd = h))
y0[i] <- coef(g0.lm) # estimate of g(x0)
}
# local linear
m <- length(x0)
y1 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y ~ I(x - x0[i]),
weights = dnorm(x - x0[i], sd = h))
y1[i] <- coef(g0.lm)[1] # local linear estimate of g(x0)
}
# local quadratic
m <- length(x0)
y2 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y ~ I(x - x0[i]) + I((x-x0[i])^2),
weights = dnorm(x - x0[i], sd = h))
y2[i] <- coef(g0.lm)[1] # local quadratic estimate of g(x0)
}
plot(x, y)
lines(x0, y0)
lines(x0, y1, col=2)
lines(x0, y2, col=3)
legend(5,5.5, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), cex=0.8)
# local constant
x0 <- seq(1.25, 5.75, 0.25)
m <- length(x0)
y0 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y ~ 1, weights = dnorm(x - x0[i], sd = h))
y0[i] <- coef(g0.lm) # estimate of g(x0)
}
# local linear
m <- length(x0)
y1 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y ~ I(x - x0[i]),
weights = dnorm(x - x0[i], sd = h))
y1[i] <- coef(g0.lm)[1] # local linear estimate of g(x0)
}
# local quadratic
m <- length(x0)
y2 <- numeric(m)
for (i in 1:m) {
g0.lm <- lm(y ~ I(x - x0[i]) + I((x-x0[i])^2),
weights = dnorm(x - x0[i], sd = h))
y2[i] <- coef(g0.lm)[1] # local quadratic estimate of g(x0)
}
plot(x, y)
lines(x0, y0)
lines(x0, y1, col=2)
lines(x0, y2, col=3)
legend(5,5.5, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), lty=1, cex=0.8)
library(DAAG)
x <- ironslag$magnetic
y <- ironslag$chemical
library(KernSmooth)
h <- dpill(x, y)
ironslag.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
ironslag.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
ironslag.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
plot(x, y, col="grey")
lines(ironslag.l0)
lines(ironslag.l1, col=2, lty=2)
lines(ironslag.l2, col=3)
legend(5,5.5, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), lty=1:2, cex=0.8)
library(DAAG)
x <- ironslag$magnetic
y <- ironslag$chemical
library(KernSmooth)
h <- dpill(x, y)
ironslag.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
ironslag.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
ironslag.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
plot(x, y, col="grey")
lines(ironslag.l0)
lines(ironslag.l1, col=2, lty=2)
lines(ironslag.l2, col=3)
legend(25,30, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), lty=1:2, cex=0.8)
library(DAAG)
x <- ironslag$magnetic
y <- ironslag$chemical
library(KernSmooth)
h <- dpill(x, y)
ironslag.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
ironslag.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
ironslag.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
plot(x, y, col="grey")
lines(ironslag.l0)
lines(ironslag.l1, col=2, lty=2)
lines(ironslag.l2, col=3)
legend(30,35, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), lty=1:2, cex=0.8)
library(DAAG)
x <- ironslag$magnetic
y <- ironslag$chemical
library(KernSmooth)
h <- dpill(x, y)
ironslag.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
ironslag.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
ironslag.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
plot(x, y, col="grey")
lines(ironslag.l0)
lines(ironslag.l1, col=2, lty=2)
lines(ironslag.l2, col=3)
legend(35, 10, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), lty=1:2, cex=0.8)
library(DAAG)
x <- ironslag$magnetic
y <- ironslag$chemical
library(KernSmooth)
h <- dpill(x, y)
ironslag.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
ironslag.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
ironslag.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
plot(x, y, col="grey")
lines(ironslag.l0)
lines(ironslag.l1, col=2, lty=2)
lines(ironslag.l2, col=3)
legend(35, 20, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), lty=1:2, cex=0.8)
x <- ironslag$magnetic
y <- ironslag$chemical
library(KernSmooth)
h <- dpill(x, y)
ironslag.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
ironslag.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
ironslag.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
plot(x, y, col="grey")
lines(ironslag.l0)
lines(ironslag.l1, col=2, lty=2)
lines(ironslag.l2, col=3)
legend(35, 20, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), lty=1:2, cex=0.8)
library(DAAG)
x <- ironslag$magnetic
y <- ironslag$chemical
library(KernSmooth)
h <- dpill(x, y)
ironslag.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
ironslag.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
ironslag.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
plot(x, y, col="grey")
lines(ironslag.l0)
lines(ironslag.l1, col=2, lty=2)
lines(ironslag.l2, col=3)
legend(35, 20, legend=c("constant", "linear", "quadratic"),
col=c(1,2,3), lty=1:2, cex=0.8)
set.seed(36360)
g <- function(x) sin(7/(x+.5))
n <- 50; sigma = 0.25
x <- runif(n, max = 1)
y <- g(x) + rnorm(n, sd = sigma)
plot(x, y)
h <- 0.1
sim.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
sim.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
sim.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
lines(sim.l0)
lines(sim.l1, col=2, lty=2)
lines(sim.l2, col=3)
curve(g(x), 0, 2, add = TRUE, col = 4)
legend(35, 20, legend=c("constant", "linear", "quadratic", "true"),
col=1:4, lty=1:2, cex=0.8)
set.seed(36360)
g <- function(x) sin(7/(x+.5))
n <- 50; sigma = 0.25
x <- runif(n, max = 1)
y <- g(x) + rnorm(n, sd = sigma)
plot(x, y)
h <- 0.1
sim.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
sim.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
sim.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
lines(sim.l0)
lines(sim.l1, col=2, lty=2)
lines(sim.l2, col=3)
curve(g(x), 0, 2, add = TRUE, col = 4)
legend(.8, .5, legend=c("constant", "linear", "quadratic", "true"),
col=1:4, lty=1:2, cex=0.8)
set.seed(36360)
g <- function(x) sin(7/(x+.5))
n <- 50; sigma = 0.25
x <- runif(n, max = 1)
y <- g(x) + rnorm(n, sd = sigma)
plot(x, y)
h <- 0.1
sim.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
sim.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
sim.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
lines(sim.l0)
lines(sim.l1, col=2, lty=2)
lines(sim.l2, col=3)
curve(g(x), 0, 2, add = TRUE, col = 4)
legend(.8,1, legend=c("constant", "linear", "quadratic", "true"),
col=1:4, lty=1:2, cex=0.8)
set.seed(36360)
g <- function(x) exp(sin(6*x))
n <- 50; sigma = 0.25
x <- runif(n, max = 1)
y <- g(x) + rnorm(n, sd = sigma)
plot(x, y)
h <- 0.1
sim.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
sim.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
sim.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
lines(sim.l0)
lines(sim.l1, col=2, lty=2)
lines(sim.l2, col=3)
curve(g(x), 0, 2, add = TRUE, col = 4)
legend(.8,1, legend=c("constant", "linear", "quadratic", "true"),
col=1:4, lty=1:2, cex=0.8)
set.seed(36360)
g <- function(x) exp(sin(6*x))
n <- 50; sigma = 0.25
x <- runif(n, max = 1)
y <- g(x) + rnorm(n, sd = sigma)
plot(x, y)
h <- 0.1
sim.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
sim.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
sim.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
lines(sim.l0)
lines(sim.l1, col=2, lty=2)
lines(sim.l2, col=3)
curve(g(x), 0, 2, add = TRUE, col = 4)
legend(.8,2.5, legend=c("constant", "linear", "quadratic", "true"),
col=1:4, lty=1:2, cex=0.8)
set.seed(36360)
g <- function(x) exp(sin(6*x))
n <- 50; sigma = 0.25
x <- runif(n, max = 1)
y <- g(x) + rnorm(n, sd = sigma)
plot(x, y)
h <- 0.1
sim.l0 <- locpoly(x, y, degree = 0, bandwidth = h)
sim.l1 <- locpoly(x, y, degree = 1, bandwidth = h)
sim.l2 <- locpoly(x, y, degree = 2, bandwidth = h)
lines(sim.l0)
lines(sim.l1, col=2)
lines(sim.l2, col=3)
curve(g(x), 0, 2, add = TRUE, col = 4)
legend(.8,2.5, legend=c("constant", "linear", "quadratic", "true"),
col=1:4, lty=1, cex=0.8)
knitr::opts_chunk$set(echo = TRUE)
linmod <- glm(numfail ~ months, family = poisson(link = "log"), data = p13.6)
library(MPV)
linmod <- glm(numfail ~ months, family = poisson(link = "log"), data = p13.6)
summary(linmod)
a <- coef(linmod)[1]
b <- coef(linmod)[2]
x <- p13.6$months
y <- p13.6$numfail
plot(x = x, y = y, main = "Estimate of E[numfails|months=month]")
curve(exp(a + b*x), add = TRUE) # overlay fitted curve
library(DAAG)
frog.model <- glm(pres.abs ~ log(distance) + log(NoOfPools) + meanmin + meanmax, data = frogs, family = binomial)
summary(frog.model)
par(mfrow=c(2,2))
plot(frog.model)
cols <- character(nrow(frogs))
cols[] <- "black"
cols[frogs$pres.abs == 0] <- "red"
cols[frogs$pres.abs == 1] <- "green"
pairs(frogs, col = cols)
data = lesions[lesions$SECT == 1, ]
data$T <- as.numeric(as.character(data$T) )
rats.glm1 <- glm(ACF.Total ~ T + INJ, family = poisson, data = data)
par(mfrow = c(2,2))
plot(rats.glm1)
summary(rats.glm1)
predict(rats.glm1, newdata = data.frame(T = 15/6, INJ = 3), type = 'response')
rats.glm2 <- glm(ACF.Total ~ T, family = poisson(link = "log"), data = data)
ratan <- anova(rats.glm1, rats.glm2)
ratan
#Bootstrap p value estimate.
D1 <- ratan$`Resid. Dev`[1]
D0 <- ratan$`Resid. Dev`[2]
dfnum <- 1
dfden <- 66-2-1
Fstar <- ((D0-D1)/dfnum)/(D1/dfden)
1 - pf(Fstar, dfnum, dfden)
y <- simulate(rats.glm2, 1000)
Fstarstar <- numeric(1000)
for (i in 1:1000){
rats.glm1 <- glm(y[,i] ~ T + INJ, family = poisson(link = "log"), data = data)
rats.glm2 <- glm(y[,i] ~ T, family = poisson(link = "log"), data = data)
ratan <- anova(rats.glm1, rats.glm2)
D1 <- ratan$`Resid. Dev`[1]
D0 <- ratan$`Resid. Dev`[2]
dfnum <- 1
dfden <- 66-2-1
Fstarstar[i] <- ((D0-D1)/dfnum)/(D1/dfden)
}
mean(Fstarstar > Fstar)
rats.glm1 <- glm(ACF.Total ~ T + INJ, family = poisson(link = "log"), data = data)
a <- coef(rats.glm1)[[1]]
b <- coef(rats.glm1)[[2]]
c <- coef(rats.glm1)[[3]]
llikelihoodValues <- with(data, log(dpois(ACF.Total, lambda = exp(a + b*T + c*INJ))))
simloglike <- function(data, rats.glm, N=10) {
ll <- matrix(0, ncol=nrow(data), nrow=N)
for (j in 1:N) {
y <- simulate(rats.glm1)$sim_1
sim.glm <- glm(y ~ data$T + data$INJ, family = poisson(link = "log"))
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
loglikelihoodValues <- log(dpois(y, lambda =
exp(a + b*data$T + c*data$INJ)))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(x)
names(ll) <- ""
ll
}
ratlike <- simloglike(data, rats.glm1)
par(mar=c(1, 4, .1,.1))
boxplot(ratlike, ylim=range(c(llikelihoodValues,ratlike)))
points(llikelihoodValues, pch=16, col=2)
rats.glm3 <- glm(ACF.Total ~ T + INJ, family = quasipoisson(link = "log"), data = data)
summary(rats.glm3)
rats.glm2 <- glm(ACF.Total ~ T, family = poisson(link = "log"), data = data)
ratan <- anova(rats.glm1, rats.glm2)
summary(ratan)
#Bootstrap p value estimate.
D1 <- ratan$`Resid. Dev`[1]
D0 <- ratan$`Resid. Dev`[2]
dfnum <- 1
dfden <- 66-2-1
Fstar <- ((D0-D1)/dfnum)/(D1/dfden)
1 - pf(Fstar, dfnum, dfden)
y <- simulate(rats.glm2, 1000)
Fstarstar <- numeric(1000)
for (i in 1:1000){
rats.glm1 <- glm(y[,i] ~ T + INJ, family = poisson(link = "log"), data = data)
rats.glm2 <- glm(y[,i] ~ T, family = poisson(link = "log"), data = data)
ratan <- anova(rats.glm1, rats.glm2)
D1 <- ratan$`Resid. Dev`[1]
D0 <- ratan$`Resid. Dev`[2]
dfnum <- 1
dfden <- 66-2-1
Fstarstar[i] <- ((D0-D1)/dfnum)/(D1/dfden)
}
mean(Fstarstar > Fstar)
rats.glm2 <- glm(ACF.Total ~ T, family = poisson(link = "log"), data = data)
ratan <- anova(rats.glm1, rats.glm2)
ratan
#Bootstrap p value estimate.
D1 <- ratan$`Resid. Dev`[1]
D0 <- ratan$`Resid. Dev`[2]
dfnum <- 1
dfden <- 66-2-1
Fstar <- ((D0-D1)/dfnum)/(D1/dfden)
1 - pf(Fstar, dfnum, dfden)
y <- simulate(rats.glm2, 1000)
Fstarstar <- numeric(1000)
for (i in 1:1000){
rats.glm1 <- glm(y[,i] ~ T + INJ, family = poisson(link = "log"), data = data)
rats.glm2 <- glm(y[,i] ~ T, family = poisson(link = "log"), data = data)
ratan <- anova(rats.glm1, rats.glm2)
D1 <- ratan$`Resid. Dev`[1]
D0 <- ratan$`Resid. Dev`[2]
dfnum <- 1
dfden <- 66-2-1
Fstarstar[i] <- ((D0-D1)/dfnum)/(D1/dfden)
}
mean(Fstarstar > Fstar)
linmod <- glm(numfail ~ months, family = poisson(link = "log"), data = p13.6)
summary(linmod)
a <- coef(linmod)[1]
b <- coef(linmod)[2]
x <- p13.6$months
y <- p13.6$numfail
plot(x = x, y = y, main = "Estimate of E[numfails|months=month]")
curve(exp(a + b*x), add = TRUE) # overlay fitted curve
a
b
#Show the model diagnostic plots.
par(mfrow = c(2,2))
plot(linmod)
data = lesions[lesions$SECT == 1, ]
data$T <- as.numeric(as.character(data$T) )
rats.glm1 <- glm(ACF.Total ~ T + INJ, family = poisson, data = data)
par(mfrow = c(2,2))
plot(rats.glm1)
summary(rats.glm1)
rats.glm3 <- glm(ACF.Total ~ T + INJ, family = quasipoisson(link = "log"), data = data)
summary(rats.glm3)
?prcomp
source("~/OneDrive - UBC/MDS/Block 5/551/dashboard2-group-g/app.R")
setwd("~/OneDrive - UBC/MDS/Block 5/551/dashboard2-group-g")
source("~/OneDrive - UBC/MDS/Block 5/551/dashboard2-group-g/app.R")
